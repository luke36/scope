(defsort Expr :import 1 :export 0)
(defsort IdList :import 1 :export 1)
(defsort ExprList :import 1 :export 0)
(defsort Bind :import 2 :export 1)

(defun var (: x VarUse) :sort Expr)
(defscope :function var :import ((x 0)))
(defun lambda (: xs IdList) (: e Expr) :sort Expr)
(defscope :function lambda :import ((xs 0) (e 0)) :bind ((e 0) (xs 0)))
(defun app (: f Expr) (: es ExprList) :sort Expr)
(defscope :function app :import ((f 0) (es 0)))
(defun letrec (: bind Bind) (: body Expr) :sort Expr)
(defscope :function letrec :import ((bind 0) (bind 1) (body 0)) :bind ((body 0) (bind 0)))

(defun more-binds (: x VarDef) (: e Expr) (: binds Bind) :sort Bind)
(defscope :function more-binds
          :import ((x 0) (binds 0)) ((e 0) (binds 1))
          :export ((x 0) (binds 0))
          :bind ((e 0) (x 0)) ((e 0) (binds 0)) ((binds 1) (x 0)))
(defun end-binds :sort Bind)
(defscope :function end-binds :import () () :export ())

(defun id-cons (: x VarDef) (: xs IdList) :sort IdList)
(defscope :function id-cons :import ((x 0) (xs 0)) :export ((x 0) (xs 0)))
(defun id-nil :sort IdList)
(defscope :function id-nil :import () :export ())

(defun expr-cons (: e Expr) (: es ExprList) :sort ExprList)
(defscope :function expr-cons :import ((e 0) (es 0)))
(defun expr-nil :sort ExprList)
(defscope :function expr-nil :import ())

(defsort Stx :import 2 :export 1)
(defun end-do-binds :sort Stx)
(defun more-do-binds (: x VarDef) (: init Expr) (: step Expr) (: binds Stx)
                     :sort Stx)
(defun extracting (: binds Stx) (: xs IdList) (: inits ExprList) (: steps ExprList)
                  :sort Expr)
(defun do (: binds Stx) :sort Expr)
(defmacro (do 1) (extracting 1 (id-nil) (expr-nil) (expr-nil)))
(defmacro (extracting (end-do-binds) 1 2 3)
          (letrec (more-binds loop (lambda 1 (app loop 3)) (end-binds))
                  (app loop 2)))
(defmacro (extracting (more-do-binds 1 2 3 4) 5 6 7)
          (extracting 4
           (id-cons 1 5) (expr-cons 2 6) (expr-cons 3 7)))

(infer)
(dump)
